// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	repository "poc/internal/repository"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Delete provides a mock function with given fields: value, conds
func (_m *Database) Delete(value interface{}, conds ...interface{}) repository.Database {
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) repository.Database); ok {
		r0 = rf(value, conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// Find provides a mock function with given fields: dest, conds
func (_m *Database) Find(dest interface{}, conds ...interface{}) repository.Database {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) repository.Database); ok {
		r0 = rf(dest, conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// First provides a mock function with given fields: dest, conds
func (_m *Database) First(dest interface{}, conds ...interface{}) repository.Database {
	var _ca []interface{}
	_ca = append(_ca, dest)
	_ca = append(_ca, conds...)
	ret := _m.Called(_ca...)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) repository.Database); ok {
		r0 = rf(dest, conds...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// GetError provides a mock function with given fields:
func (_m *Database) GetError() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRowsAffected provides a mock function with given fields:
func (_m *Database) GetRowsAffected() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetStatement provides a mock function with given fields:
func (_m *Database) GetStatement() *gorm.Statement {
	ret := _m.Called()

	var r0 *gorm.Statement
	if rf, ok := ret.Get(0).(func() *gorm.Statement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.Statement)
		}
	}

	return r0
}

// Model provides a mock function with given fields: value
func (_m *Database) Model(value interface{}) repository.Database {
	ret := _m.Called(value)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}) repository.Database); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// Raw provides a mock function with given fields: sql, values
func (_m *Database) Raw(sql string, values ...interface{}) repository.Database {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(string, ...interface{}) repository.Database); ok {
		r0 = rf(sql, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// Save provides a mock function with given fields: value
func (_m *Database) Save(value interface{}) repository.Database {
	ret := _m.Called(value)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}) repository.Database); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: dest
func (_m *Database) Scan(dest interface{}) repository.Database {
	ret := _m.Called(dest)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}) repository.Database); ok {
		r0 = rf(dest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// Updates provides a mock function with given fields: values
func (_m *Database) Updates(values interface{}) repository.Database {
	ret := _m.Called(values)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}) repository.Database); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}

// Where provides a mock function with given fields: query, args
func (_m *Database) Where(query interface{}, args ...interface{}) repository.Database {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 repository.Database
	if rf, ok := ret.Get(0).(func(interface{}, ...interface{}) repository.Database); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Database)
		}
	}

	return r0
}
